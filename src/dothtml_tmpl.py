#!/usr/bin/env python




##################################################
## DEPENDENCIES
import sys
import os
import os.path
from os.path import getmtime, exists
import time
import types
import __builtin__
from Cheetah.Version import MinCompatibleVersion as RequiredCheetahVersion
from Cheetah.Version import MinCompatibleVersionTuple as RequiredCheetahVersionTuple
from Cheetah.Template import Template
from Cheetah.DummyTransaction import DummyTransaction
from Cheetah.NameMapper import NotFound, valueForName, valueFromSearchList, valueFromFrameOrSearchList
from Cheetah.CacheRegion import CacheRegion
import Cheetah.Filters as Filters
import Cheetah.ErrorCatchers as ErrorCatchers

##################################################
## MODULE CONSTANTS
try:
    True, False
except NameError:
    True, False = (1==1), (1==0)
VFFSL=valueFromFrameOrSearchList
VFSL=valueFromSearchList
VFN=valueForName
currentTime=time.time
__CHEETAH_version__ = '2.0.1'
__CHEETAH_versionTuple__ = (2, 0, 1, 'final', 0)
__CHEETAH_genTime__ = 1279805674.676868
__CHEETAH_genTimestamp__ = 'Thu Jul 22 08:34:34 2010'
__CHEETAH_src__ = 'dothtml_tmpl.tmpl'
__CHEETAH_srcLastModified__ = 'Thu Jul 22 08:34:06 2010'
__CHEETAH_docstring__ = 'Autogenerated by CHEETAH: The Python-Powered Template Engine'

if __CHEETAH_versionTuple__ < RequiredCheetahVersionTuple:
    raise AssertionError(
      'This template was compiled with Cheetah version'
      ' %s. Templates compiled before version %s must be recompiled.'%(
         __CHEETAH_version__, RequiredCheetahVersion))

##################################################
## CLASSES

class dothtml_tmpl(Template):

    ##################################################
    ## CHEETAH GENERATED METHODS


    def __init__(self, *args, **KWs):

        Template.__init__(self, *args, **KWs)
        if not self._CHEETAH__instanceInitialized:
            cheetahKWArgs = {}
            allowedKWs = 'searchList namespaces filter filtersLib errorCatcher'.split()
            for k,v in KWs.items():
                if k in allowedKWs: cheetahKWArgs[k] = v
            self._initCheetahInstance(**cheetahKWArgs)
        

    def respond(self, trans=None):



        ## CHEETAH: main method generated for this template
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        write('''<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML+RDFa 1.0//EN"
    "http://www.w3.org/MarkUp/DTD/xhtml-rdfa-1.dtd">

<html
\tversion="XHTML+RDFa 1.0"
\txmlns="http://www.w3.org/1999/xhtml"
\txmlns:sim="http://purl.org/ontology/similarity/"
\txmlns:dc="http://purl.org/dc/terms/"
\txmlns:foaf="http://xmlns.com/foaf/0.1/"
\txmlns:mo="http://purl.org/ontology/mo/"
\txmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
\txml:lang="en">
\t
  <head>
\t<title>''')
        _v = VFFSL(SL,"title",True) # '$title' on line 15, col 9
        if _v is not None: write(_filter(_v, rawExpr='$title')) # from line 15, col 9.
        write('''</title><meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    <link rel="alternate" type="application/rdf+xml" href="''')
        _v = VFFSL(SL,"rdfxml",True) # '$rdfxml' on line 16, col 60
        if _v is not None: write(_filter(_v, rawExpr='$rdfxml')) # from line 16, col 60.
        write('''" title="RDF/XML"/>
    <link rel="alternate" type="text/n3" href="''')
        _v = VFFSL(SL,"n3",True) # '$n3' on line 17, col 48
        if _v is not None: write(_filter(_v, rawExpr='$n3')) # from line 17, col 48.
        write('''" title="Turtle"/>
    
    <link rel="stylesheet" type="text/css" href="../css/rdfstyle.css" media="screen" />
  </head>
  <body>
  <div id="content">
  <h1>about</h1>
  <h2>''')
        _v = VFFSL(SL,"title",True) # '$title' on line 24, col 7
        if _v is not None: write(_filter(_v, rawExpr='$title')) # from line 24, col 7.
        write('''</h2>
  <p>view as <a href="''')
        _v = VFFSL(SL,"rdfxml",True) # '$rdfxml' on line 25, col 23
        if _v is not None: write(_filter(_v, rawExpr='$rdfxml')) # from line 25, col 23.
        write('''" title="RDF/XML">RDF/XML</a> or <a href="''')
        _v = VFFSL(SL,"n3",True) # '$n3' on line 25, col 72
        if _v is not None: write(_filter(_v, rawExpr='$n3')) # from line 25, col 72.
        write('''" title="Turtle">Turtle</a></p>

  
  
  <table>
  <th>similarity statements</th>
''')
        even = False
        for s_html, p_html_dict in VFN(VFFSL(SL,"sims",True),"items",False)(): # generated from line 32, col 3
            if VFFSL(SL,"even",True): # generated from line 33, col 3
                write('''  <tr class="even">
''')
                even = False
            else: # generated from line 36, col 3
                write('''  <tr class="odd">
''')
                even = True
            write('''  \t<td>
  \t\t''')
            _v = VFFSL(SL,"s_html",True) # '$s_html' on line 41, col 5
            if _v is not None: write(_filter(_v, rawExpr='$s_html')) # from line 41, col 5.
            write('''
  \t</td>
  \t<td><ul>
''')
            for p_html, o_html_list in VFN(VFFSL(SL,"p_html_dict",True),"items",False)(): # generated from line 44, col 4
                write('''  \t\t<li>''')
                _v = VFFSL(SL,"p_html",True) # '$p_html' on line 45, col 9
                if _v is not None: write(_filter(_v, rawExpr='$p_html')) # from line 45, col 9.
                write(''' - 
''')
                for o_html in VFFSL(SL,"o_html_list",True): # generated from line 46, col 5
                    write('''  \t\t\t''')
                    _v = VFFSL(SL,"o_html",True) # '$o_html' on line 47, col 6
                    if _v is not None: write(_filter(_v, rawExpr='$o_html')) # from line 47, col 6.
                    write('''
''')
                write('''  \t\t</li>
  \t\t
''')
            write('''  \t</td></ul>
  </tr>
''')
        write("""  
  <th>artists' info</th>
""")
        even = False
        for s_html, p_html_dict in VFN(VFFSL(SL,"artists",True),"items",False)(): # generated from line 58, col 3
            if VFFSL(SL,"even",True): # generated from line 59, col 3
                write('''  <tr class="even">
''')
                even = False
            else: # generated from line 62, col 3
                write('''  <tr class="odd">
''')
                even = True
            write('''  \t<td>
  \t\t''')
            _v = VFFSL(SL,"s_html",True) # '$s_html' on line 67, col 5
            if _v is not None: write(_filter(_v, rawExpr='$s_html')) # from line 67, col 5.
            write('''
  \t</td>
  \t<td><ul>
''')
            for p_html, o_html_list in VFN(VFFSL(SL,"p_html_dict",True),"items",False)(): # generated from line 70, col 4
                write('''  \t\t<li>''')
                _v = VFFSL(SL,"p_html",True) # '$p_html' on line 71, col 9
                if _v is not None: write(_filter(_v, rawExpr='$p_html')) # from line 71, col 9.
                write('''  
''')
                for o_html in VFFSL(SL,"o_html_list",True): # generated from line 72, col 5
                    write('''  \t\t\t''')
                    _v = VFFSL(SL,"o_html",True) # '$o_html' on line 73, col 6
                    if _v is not None: write(_filter(_v, rawExpr='$o_html')) # from line 73, col 6.
                    write('''
''')
                write('''  \t\t</li>
  \t\t
''')
            write('''  \t</td></ul>
  </tr>
''')
        write('''  </table>
 
  </div>
  </body>
</html>''')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        
    ##################################################
    ## CHEETAH GENERATED ATTRIBUTES


    _CHEETAH__instanceInitialized = False

    _CHEETAH_version = __CHEETAH_version__

    _CHEETAH_versionTuple = __CHEETAH_versionTuple__

    _CHEETAH_genTime = __CHEETAH_genTime__

    _CHEETAH_genTimestamp = __CHEETAH_genTimestamp__

    _CHEETAH_src = __CHEETAH_src__

    _CHEETAH_srcLastModified = __CHEETAH_srcLastModified__

    _mainCheetahMethod_for_dothtml_tmpl= 'respond'

## END CLASS DEFINITION

if not hasattr(dothtml_tmpl, '_initCheetahAttributes'):
    templateAPIClass = getattr(dothtml_tmpl, '_CHEETAH_templateClass', Template)
    templateAPIClass._addCheetahPlumbingCodeToClass(dothtml_tmpl)


# CHEETAH was developed by Tavis Rudd and Mike Orr
# with code, advice and input from many other volunteers.
# For more information visit http://www.CheetahTemplate.org/

##################################################
## if run from command line:
if __name__ == '__main__':
    from Cheetah.TemplateCmdLineIface import CmdLineIface
    CmdLineIface(templateObj=dothtml_tmpl()).run()


